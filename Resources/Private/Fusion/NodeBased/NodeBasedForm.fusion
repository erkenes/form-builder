prototype(Neos.Form.Builder:NodeBasedForm) < prototype(Neos.Form.Builder:Form) {
    @context.formNode = ${q(node).closest('[instanceof Neos.Form.Builder:NodeBasedForm]').get(0)}
    @context.formFusionPath = ${this.path}
    identifier = ${formNode.properties.identifier || 'form-' + pageNode.aggregateId.value}
    presetName = ${formNode.properties.preset ? formNode.properties.preset : 'default'}
    formElementType = ${renderingMode.isEdit ? 'Neos.Form:FormEditMode' : 'Neos.Form:Form'}

    renderCallbacks.formElementWrapping = Neos.Form.Builder:FormElementWrapping {
        @if.isInBackend = ${renderingMode.isEdit}
    }

    firstPage {
        label = ${formNode.properties.label}
        renderingOptions._node = ${formNode}
        renderingOptions._fusionPath = ${formFusionPath}
        elements = Neos.Form.Builder:NodeBasedElementCollection {
            items = ${q(formNode).children('elements').children()}
        }
    }
    furtherPages = Neos.Form.Builder:NodeBasedPageCollection {
        items = ${q(formNode).children('furtherPages').children()}
    }
    finishers = Neos.Form.Builder:NodeBasedFinisherCollection {
        items = ${q(formNode).children('finishers').children()}
    }
    @process.contentElementWrapping = Neos.Neos:ContentElementWrapping {
        additionalAttributes {
            'data-_neos-form-builder-type' = ${formNode.nodeTypeName.value}
        }
    }

    @cache {
        context {
            1 = 'node'
            2 = 'documentNode'
            3 = 'site'
        }
    }
}

prototype(Neos.Form.Builder:FormElementWrapping) {
    @class = 'Neos\\Form\\Builder\\Fusion\\FormElementWrappingImplementation'
}
